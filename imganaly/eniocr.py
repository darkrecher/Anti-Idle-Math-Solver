# -*- coding: utf-8 -*-from log import logfrom symbol import Symbolfrom symbref import SymbolReferencesclass EnigmaOcr():    """Ouais bon, c'est pas du tout de l'OCR, mais fallait bien que je trouve    un nom. non de non."""        def __init__(self):        self.symbole_references = SymbolReferences()                def ocr_ify_enigma(self, list_symbol_before, rgb_big_op, list_symbol_after):        for symb in list_symbol_before:            log(symb)        log(rgb_big_op)        for symb in list_symbol_after:            log(symb)        self.list_symbol = []        self.list_signifiance = []                list_signifiance_before = [             self.symbole_references.find_signifiance(symb)            for symb in list_symbol_before ]        self.list_symbol.extend(list_symbol_before)        self.list_signifiance.extend(list_signifiance_before)                if rgb_big_op is not None:            # osef, c'est juste pour avoir list_symbol et list_signifiance            # cohérentes entre elles.            list_symb_big_op = Symbole()             # TODO            signifiance_big_op = "_"                    list_signifiance_after = [             self.symbole_references.find_signifiance(symb)            for symb in list_symbol_after ]        self.list_symbol.extend(list_symbol_after)        self.list_signifiance.extend(list_signifiance_after)                self.enigma_text = "".join(self.list_signifiance)        return "!" not in self.enigma_text                        